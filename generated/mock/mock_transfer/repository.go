// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_transfer is a generated GoMock package.
package mock_transfer

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/1nterdigital/aka-im-wallet/internal/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountClaimedTransferInDay mocks base method.
func (m *MockRepository) CountClaimedTransferInDay(ctx context.Context, userID string, since time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClaimedTransferInDay", ctx, userID, since)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClaimedTransferInDay indicates an expected call of CountClaimedTransferInDay.
func (mr *MockRepositoryMockRecorder) CountClaimedTransferInDay(ctx, userID, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClaimedTransferInDay", reflect.TypeOf((*MockRepository)(nil).CountClaimedTransferInDay), ctx, userID, since)
}

// CountSentTransferInDay mocks base method.
func (m *MockRepository) CountSentTransferInDay(ctx context.Context, userID string, since time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSentTransferInDay", ctx, userID, since)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSentTransferInDay indicates an expected call of CountSentTransferInDay.
func (mr *MockRepositoryMockRecorder) CountSentTransferInDay(ctx, userID, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSentTransferInDay", reflect.TypeOf((*MockRepository)(nil).CountSentTransferInDay), ctx, userID, since)
}

// Create mocks base method.
func (m *MockRepository) Create(transfer *entity.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), transfer)
}

// CreateTransfer mocks base method.
func (m *MockRepository) CreateTransfer(ctx context.Context, tx *gorm.DB, transfer *entity.Transfer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, tx, transfer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockRepositoryMockRecorder) CreateTransfer(ctx, tx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockRepository)(nil).CreateTransfer), ctx, tx, transfer)
}

// FetchExpiredTransfers mocks base method.
func (m *MockRepository) FetchExpiredTransfers(ctx context.Context, ids []int64) ([]*entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExpiredTransfers", ctx, ids)
	ret0, _ := ret[0].([]*entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExpiredTransfers indicates an expected call of FetchExpiredTransfers.
func (mr *MockRepositoryMockRecorder) FetchExpiredTransfers(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExpiredTransfers", reflect.TypeOf((*MockRepository)(nil).FetchExpiredTransfers), ctx, ids)
}

// FindAllTransferByWalletID mocks base method.
func (m *MockRepository) FindAllTransferByWalletID(walletID string) ([]entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransferByWalletID", walletID)
	ret0, _ := ret[0].([]entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransferByWalletID indicates an expected call of FindAllTransferByWalletID.
func (mr *MockRepositoryMockRecorder) FindAllTransferByWalletID(walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransferByWalletID", reflect.TypeOf((*MockRepository)(nil).FindAllTransferByWalletID), walletID)
}

// FindByTransferID mocks base method.
func (m *MockRepository) FindByTransferID(ctx context.Context, transferID int64) (*entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTransferID", ctx, transferID)
	ret0, _ := ret[0].(*entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTransferID indicates an expected call of FindByTransferID.
func (mr *MockRepositoryMockRecorder) FindByTransferID(ctx, transferID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTransferID", reflect.TypeOf((*MockRepository)(nil).FindByTransferID), ctx, transferID)
}

// GetDetailTransfer mocks base method.
func (m *MockRepository) GetDetailTransfer(ctx context.Context, transferID int64, userID string) (*entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailTransfer", ctx, transferID, userID)
	ret0, _ := ret[0].(*entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailTransfer indicates an expected call of GetDetailTransfer.
func (mr *MockRepositoryMockRecorder) GetDetailTransfer(ctx, transferID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailTransfer", reflect.TypeOf((*MockRepository)(nil).GetDetailTransfer), ctx, transferID, userID)
}

// GetEligibleClaimTransfer mocks base method.
func (m *MockRepository) GetEligibleClaimTransfer(ctx context.Context, transferID int64, claimerUserID string) (*entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEligibleClaimTransfer", ctx, transferID, claimerUserID)
	ret0, _ := ret[0].(*entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEligibleClaimTransfer indicates an expected call of GetEligibleClaimTransfer.
func (mr *MockRepositoryMockRecorder) GetEligibleClaimTransfer(ctx, transferID, claimerUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEligibleClaimTransfer", reflect.TypeOf((*MockRepository)(nil).GetEligibleClaimTransfer), ctx, transferID, claimerUserID)
}

// GetEligibleRefundTransfer mocks base method.
func (m *MockRepository) GetEligibleRefundTransfer(ctx context.Context, transferID int64, userID string) (*entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEligibleRefundTransfer", ctx, transferID, userID)
	ret0, _ := ret[0].(*entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEligibleRefundTransfer indicates an expected call of GetEligibleRefundTransfer.
func (mr *MockRepositoryMockRecorder) GetEligibleRefundTransfer(ctx, transferID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEligibleRefundTransfer", reflect.TypeOf((*MockRepository)(nil).GetEligibleRefundTransfer), ctx, transferID, userID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, transfer *entity.Transfer, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, transfer, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, transfer, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, transfer, tx)
}
