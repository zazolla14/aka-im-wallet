// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_wallet_monitoring is a generated GoMock package.
package mock_wallet_monitoring

import (
	context "context"
	reflect "reflect"

	domain "github.com/1nterdigital/aka-im-wallet/internal/domain"
	entity "github.com/1nterdigital/aka-im-wallet/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletMonitoringRepository is a mock of WalletMonitoringRepository interface.
type MockWalletMonitoringRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMonitoringRepositoryMockRecorder
}

// MockWalletMonitoringRepositoryMockRecorder is the mock recorder for MockWalletMonitoringRepository.
type MockWalletMonitoringRepositoryMockRecorder struct {
	mock *MockWalletMonitoringRepository
}

// NewMockWalletMonitoringRepository creates a new mock instance.
func NewMockWalletMonitoringRepository(ctrl *gomock.Controller) *MockWalletMonitoringRepository {
	mock := &MockWalletMonitoringRepository{ctrl: ctrl}
	mock.recorder = &MockWalletMonitoringRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletMonitoringRepository) EXPECT() *MockWalletMonitoringRepositoryMockRecorder {
	return m.recorder
}

// GetDashboardTransactionVolume mocks base method.
func (m *MockWalletMonitoringRepository) GetDashboardTransactionVolume(ctx context.Context) ([]*entity.TransactionCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardTransactionVolume", ctx)
	ret0, _ := ret[0].([]*entity.TransactionCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardTransactionVolume indicates an expected call of GetDashboardTransactionVolume.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetDashboardTransactionVolume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardTransactionVolume", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetDashboardTransactionVolume), ctx)
}

// GetEnvelopeDetail mocks base method.
func (m *MockWalletMonitoringRepository) GetEnvelopeDetail(ctx context.Context, req *domain.GetEnvelopeDetailRequest) (*entity.Envelope, []*entity.EnvelopeDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopeDetail", ctx, req)
	ret0, _ := ret[0].(*entity.Envelope)
	ret1, _ := ret[1].([]*entity.EnvelopeDetail)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvelopeDetail indicates an expected call of GetEnvelopeDetail.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetEnvelopeDetail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopeDetail", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetEnvelopeDetail), ctx, req)
}

// GetListEnvelope mocks base method.
func (m *MockWalletMonitoringRepository) GetListEnvelope(ctx context.Context, req *domain.GetListEnvelopeRequest) ([]*entity.Envelope, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEnvelope", ctx, req)
	ret0, _ := ret[0].([]*entity.Envelope)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListEnvelope indicates an expected call of GetListEnvelope.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetListEnvelope(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEnvelope", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetListEnvelope), ctx, req)
}

// GetListTransactionMonitoring mocks base method.
func (m *MockWalletMonitoringRepository) GetListTransactionMonitoring(ctx context.Context, req *domain.GetListTransactionMonitoringRequest) ([]*entity.WalletTransaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransactionMonitoring", ctx, req)
	ret0, _ := ret[0].([]*entity.WalletTransaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListTransactionMonitoring indicates an expected call of GetListTransactionMonitoring.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetListTransactionMonitoring(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransactionMonitoring", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetListTransactionMonitoring), ctx, req)
}

// GetTop10Users mocks base method.
func (m *MockWalletMonitoringRepository) GetTop10Users(ctx context.Context, req *domain.GetTop10UsersRequest) ([]*entity.UserStatResult, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop10Users", ctx, req)
	ret0, _ := ret[0].([]*entity.UserStatResult)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTop10Users indicates an expected call of GetTop10Users.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetTop10Users(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop10Users", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetTop10Users), ctx, req)
}

// GetTransferHistory mocks base method.
func (m *MockWalletMonitoringRepository) GetTransferHistory(ctx context.Context, req *domain.GetTransferHistoryRequest) ([]*entity.Transfer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferHistory", ctx, req)
	ret0, _ := ret[0].([]*entity.Transfer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransferHistory indicates an expected call of GetTransferHistory.
func (mr *MockWalletMonitoringRepositoryMockRecorder) GetTransferHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferHistory", reflect.TypeOf((*MockWalletMonitoringRepository)(nil).GetTransferHistory), ctx, req)
}
