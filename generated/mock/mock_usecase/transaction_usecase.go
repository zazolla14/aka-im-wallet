// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/1nterdigital/aka-im-wallet/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletTransactionSvc is a mock of WalletTransactionSvc interface.
type MockWalletTransactionSvc struct {
	ctrl     *gomock.Controller
	recorder *MockWalletTransactionSvcMockRecorder
}

// MockWalletTransactionSvcMockRecorder is the mock recorder for MockWalletTransactionSvc.
type MockWalletTransactionSvcMockRecorder struct {
	mock *MockWalletTransactionSvc
}

// NewMockWalletTransactionSvc creates a new mock instance.
func NewMockWalletTransactionSvc(ctrl *gomock.Controller) *MockWalletTransactionSvc {
	mock := &MockWalletTransactionSvc{ctrl: ctrl}
	mock.recorder = &MockWalletTransactionSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletTransactionSvc) EXPECT() *MockWalletTransactionSvcMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockWalletTransactionSvc) CreateTransaction(ctx context.Context, req *domain.CreateTransactionReq) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockWalletTransactionSvcMockRecorder) CreateTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockWalletTransactionSvc)(nil).CreateTransaction), ctx, req)
}

// GetListTransaction mocks base method.
func (m *MockWalletTransactionSvc) GetListTransaction(ctx context.Context, req *domain.GetListTransactionRequest) (*domain.GetListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransaction", ctx, req)
	ret0, _ := ret[0].(*domain.GetListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransaction indicates an expected call of GetListTransaction.
func (mr *MockWalletTransactionSvcMockRecorder) GetListTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransaction", reflect.TypeOf((*MockWalletTransactionSvc)(nil).GetListTransaction), ctx, req)
}
