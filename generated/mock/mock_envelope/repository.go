// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_envelope is a generated GoMock package.
package mock_envelope

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/1nterdigital/aka-im-wallet/internal/model"
	envelope "github.com/1nterdigital/aka-im-wallet/internal/repository/envelope"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckClaimStatus mocks base method.
func (m *MockRepository) CheckClaimStatus(ctx context.Context, envelopeID int64, userID string) (*entity.ClaimStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClaimStatus", ctx, envelopeID, userID)
	ret0, _ := ret[0].(*entity.ClaimStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckClaimStatus indicates an expected call of CheckClaimStatus.
func (mr *MockRepositoryMockRecorder) CheckClaimStatus(ctx, envelopeID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClaimStatus", reflect.TypeOf((*MockRepository)(nil).CheckClaimStatus), ctx, envelopeID, userID)
}

// ClaimNextLuckyShare mocks base method.
func (m *MockRepository) ClaimNextLuckyShare(ctx context.Context, envelopeID int64) (*entity.EnvelopeDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimNextLuckyShare", ctx, envelopeID)
	ret0, _ := ret[0].(*entity.EnvelopeDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimNextLuckyShare indicates an expected call of ClaimNextLuckyShare.
func (mr *MockRepositoryMockRecorder) ClaimNextLuckyShare(ctx, envelopeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimNextLuckyShare", reflect.TypeOf((*MockRepository)(nil).ClaimNextLuckyShare), ctx, envelopeID)
}

// CountClaimedEnvelope mocks base method.
func (m *MockRepository) CountClaimedEnvelope(ctx context.Context, userID string, since time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClaimedEnvelope", ctx, userID, since)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClaimedEnvelope indicates an expected call of CountClaimedEnvelope.
func (mr *MockRepositoryMockRecorder) CountClaimedEnvelope(ctx, userID, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClaimedEnvelope", reflect.TypeOf((*MockRepository)(nil).CountClaimedEnvelope), ctx, userID, since)
}

// CountSentEnvelope mocks base method.
func (m *MockRepository) CountSentEnvelope(ctx context.Context, userID string, since time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSentEnvelope", ctx, userID, since)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSentEnvelope indicates an expected call of CountSentEnvelope.
func (mr *MockRepositoryMockRecorder) CountSentEnvelope(ctx, userID, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSentEnvelope", reflect.TypeOf((*MockRepository)(nil).CountSentEnvelope), ctx, userID, since)
}

// CreateEnvelope mocks base method.
func (m *MockRepository) CreateEnvelope(ctx context.Context, envelope *entity.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", ctx, envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvelope indicates an expected call of CreateEnvelope.
func (mr *MockRepositoryMockRecorder) CreateEnvelope(ctx, envelope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockRepository)(nil).CreateEnvelope), ctx, envelope)
}

// CreateEnvelopeDetails mocks base method.
func (m *MockRepository) CreateEnvelopeDetails(ctx context.Context, envelopeDetail []*entity.EnvelopeDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelopeDetails", ctx, envelopeDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvelopeDetails indicates an expected call of CreateEnvelopeDetails.
func (mr *MockRepositoryMockRecorder) CreateEnvelopeDetails(ctx, envelopeDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelopeDetails", reflect.TypeOf((*MockRepository)(nil).CreateEnvelopeDetails), ctx, envelopeDetail)
}

// DeactivateUnclaimedDetails mocks base method.
func (m *MockRepository) DeactivateUnclaimedDetails(ctx context.Context, envelopeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUnclaimedDetails", ctx, envelopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUnclaimedDetails indicates an expected call of DeactivateUnclaimedDetails.
func (mr *MockRepositoryMockRecorder) DeactivateUnclaimedDetails(ctx, envelopeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUnclaimedDetails", reflect.TypeOf((*MockRepository)(nil).DeactivateUnclaimedDetails), ctx, envelopeID)
}

// FetchExpiredEnvelopes mocks base method.
func (m *MockRepository) FetchExpiredEnvelopes(ctx context.Context, ids []int64) ([]*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExpiredEnvelopes", ctx, ids)
	ret0, _ := ret[0].([]*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExpiredEnvelopes indicates an expected call of FetchExpiredEnvelopes.
func (mr *MockRepositoryMockRecorder) FetchExpiredEnvelopes(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExpiredEnvelopes", reflect.TypeOf((*MockRepository)(nil).FetchExpiredEnvelopes), ctx, ids)
}

// GetAllEnvelopesByUserID mocks base method.
func (m *MockRepository) GetAllEnvelopesByUserID(userID int64) ([]*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnvelopesByUserID", userID)
	ret0, _ := ret[0].([]*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEnvelopesByUserID indicates an expected call of GetAllEnvelopesByUserID.
func (mr *MockRepositoryMockRecorder) GetAllEnvelopesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnvelopesByUserID", reflect.TypeOf((*MockRepository)(nil).GetAllEnvelopesByUserID), userID)
}

// GetEnvelope mocks base method.
func (m *MockRepository) GetEnvelope(ctx context.Context, envelopeID int64) (*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", ctx, envelopeID)
	ret0, _ := ret[0].(*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope.
func (mr *MockRepositoryMockRecorder) GetEnvelope(ctx, envelopeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockRepository)(nil).GetEnvelope), ctx, envelopeID)
}

// GetEnvelopeDetail mocks base method.
func (m *MockRepository) GetEnvelopeDetail(ctx context.Context, envelopeDetailID int64) (*entity.EnvelopeDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopeDetail", ctx, envelopeDetailID)
	ret0, _ := ret[0].(*entity.EnvelopeDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopeDetail indicates an expected call of GetEnvelopeDetail.
func (mr *MockRepositoryMockRecorder) GetEnvelopeDetail(ctx, envelopeDetailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopeDetail", reflect.TypeOf((*MockRepository)(nil).GetEnvelopeDetail), ctx, envelopeDetailID)
}

// GetEnvelopeDetailsByEnvelopID mocks base method.
func (m *MockRepository) GetEnvelopeDetailsByEnvelopID(ctx context.Context, envelopID int64) ([]*entity.EnvelopeDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopeDetailsByEnvelopID", ctx, envelopID)
	ret0, _ := ret[0].([]*entity.EnvelopeDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopeDetailsByEnvelopID indicates an expected call of GetEnvelopeDetailsByEnvelopID.
func (mr *MockRepositoryMockRecorder) GetEnvelopeDetailsByEnvelopID(ctx, envelopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopeDetailsByEnvelopID", reflect.TypeOf((*MockRepository)(nil).GetEnvelopeDetailsByEnvelopID), ctx, envelopID)
}

// GetExpiredUnRefundedEnvelopes mocks base method.
func (m *MockRepository) GetExpiredUnRefundedEnvelopes(ctx context.Context) ([]*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredUnRefundedEnvelopes", ctx)
	ret0, _ := ret[0].([]*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredUnRefundedEnvelopes indicates an expected call of GetExpiredUnRefundedEnvelopes.
func (mr *MockRepositoryMockRecorder) GetExpiredUnRefundedEnvelopes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredUnRefundedEnvelopes", reflect.TypeOf((*MockRepository)(nil).GetExpiredUnRefundedEnvelopes), ctx)
}

// GetExpiredUnRefundedEnvelopesByID mocks base method.
func (m *MockRepository) GetExpiredUnRefundedEnvelopesByID(ctx context.Context, envelopeID int64, userID string) (*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredUnRefundedEnvelopesByID", ctx, envelopeID, userID)
	ret0, _ := ret[0].(*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredUnRefundedEnvelopesByID indicates an expected call of GetExpiredUnRefundedEnvelopesByID.
func (mr *MockRepositoryMockRecorder) GetExpiredUnRefundedEnvelopesByID(ctx, envelopeID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredUnRefundedEnvelopesByID", reflect.TypeOf((*MockRepository)(nil).GetExpiredUnRefundedEnvelopesByID), ctx, envelopeID, userID)
}

// GetTx mocks base method.
func (m *MockRepository) GetTx() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockRepositoryMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockRepository)(nil).GetTx))
}

// LockEnvelopeByID mocks base method.
func (m *MockRepository) LockEnvelopeByID(ctx context.Context, envelopeID int64) (*entity.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockEnvelopeByID", ctx, envelopeID)
	ret0, _ := ret[0].(*entity.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockEnvelopeByID indicates an expected call of LockEnvelopeByID.
func (mr *MockRepositoryMockRecorder) LockEnvelopeByID(ctx, envelopeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockEnvelopeByID", reflect.TypeOf((*MockRepository)(nil).LockEnvelopeByID), ctx, envelopeID)
}

// RefundEnvelope mocks base method.
func (m *MockRepository) RefundEnvelope(ctx context.Context, envelopeID int64, refundAmount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundEnvelope", ctx, envelopeID, refundAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefundEnvelope indicates an expected call of RefundEnvelope.
func (mr *MockRepositoryMockRecorder) RefundEnvelope(ctx, envelopeID, refundAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundEnvelope", reflect.TypeOf((*MockRepository)(nil).RefundEnvelope), ctx, envelopeID, refundAmount)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, envelope *entity.Envelope, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, envelope, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, envelope, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, envelope, tx)
}

// UpdateClaimedAmount mocks base method.
func (m *MockRepository) UpdateClaimedAmount(ctx context.Context, envelopeID int64, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClaimedAmount", ctx, envelopeID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClaimedAmount indicates an expected call of UpdateClaimedAmount.
func (mr *MockRepositoryMockRecorder) UpdateClaimedAmount(ctx, envelopeID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClaimedAmount", reflect.TypeOf((*MockRepository)(nil).UpdateClaimedAmount), ctx, envelopeID, amount)
}

// UpdateEnvelopeDetail mocks base method.
func (m *MockRepository) UpdateEnvelopeDetail(ctx context.Context, detail *entity.EnvelopeDetail, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelopeDetail", ctx, detail, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvelopeDetail indicates an expected call of UpdateEnvelopeDetail.
func (mr *MockRepositoryMockRecorder) UpdateEnvelopeDetail(ctx, detail, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelopeDetail", reflect.TypeOf((*MockRepository)(nil).UpdateEnvelopeDetail), ctx, detail, tx)
}

// WithTransaction mocks base method.
func (m *MockRepository) WithTransaction(ctx context.Context, fn func(envelope.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepository)(nil).WithTransaction), ctx, fn)
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx *gorm.DB) envelope.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(envelope.Repository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
}
