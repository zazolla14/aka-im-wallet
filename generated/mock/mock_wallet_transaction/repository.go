// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_wallet_transaction is a generated GoMock package.
package mock_wallet_transaction

import (
	context "context"
	reflect "reflect"

	domain "github.com/1nterdigital/aka-im-wallet/internal/domain"
	entity "github.com/1nterdigital/aka-im-wallet/internal/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockRepository) CreateTransaction(ctx context.Context, tx *gorm.DB, transaction *entity.WalletTransaction) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tx, transaction)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockRepositoryMockRecorder) CreateTransaction(ctx, tx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockRepository)(nil).CreateTransaction), ctx, tx, transaction)
}

// FindAllByWalletID mocks base method.
func (m *MockRepository) FindAllByWalletID(walletID int64) ([]entity.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByWalletID", walletID)
	ret0, _ := ret[0].([]entity.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByWalletID indicates an expected call of FindAllByWalletID.
func (mr *MockRepositoryMockRecorder) FindAllByWalletID(walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByWalletID", reflect.TypeOf((*MockRepository)(nil).FindAllByWalletID), walletID)
}

// FindByWalletTransactionID mocks base method.
func (m *MockRepository) FindByWalletTransactionID(walletTransactionID int64) (entity.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWalletTransactionID", walletTransactionID)
	ret0, _ := ret[0].(entity.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWalletTransactionID indicates an expected call of FindByWalletTransactionID.
func (mr *MockRepositoryMockRecorder) FindByWalletTransactionID(walletTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWalletTransactionID", reflect.TypeOf((*MockRepository)(nil).FindByWalletTransactionID), walletTransactionID)
}

// GetListTransaction mocks base method.
func (m *MockRepository) GetListTransaction(ctx context.Context, req *domain.GetListTransactionRequest) ([]*entity.WalletTransaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransaction", ctx, req)
	ret0, _ := ret[0].([]*entity.WalletTransaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListTransaction indicates an expected call of GetListTransaction.
func (mr *MockRepositoryMockRecorder) GetListTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransaction", reflect.TypeOf((*MockRepository)(nil).GetListTransaction), ctx, req)
}
