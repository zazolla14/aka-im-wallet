// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_wallet is a generated GoMock package.
package mock_wallet

import (
	context "context"
	reflect "reflect"

	entity "github.com/1nterdigital/aka-im-wallet/internal/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), wallet)
}

// CreateWallet mocks base method.
func (m *MockRepository) CreateWallet(ctx context.Context, wallet *entity.Wallet) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockRepositoryMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockRepository)(nil).CreateWallet), ctx, wallet)
}

// FindByUserID mocks base method.
func (m *MockRepository) FindByUserID(userID string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockRepositoryMockRecorder) FindByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockRepository)(nil).FindByUserID), userID)
}

// FindByWalletID mocks base method.
func (m *MockRepository) FindByWalletID(walletID int64) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWalletID", walletID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWalletID indicates an expected call of FindByWalletID.
func (mr *MockRepositoryMockRecorder) FindByWalletID(walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWalletID", reflect.TypeOf((*MockRepository)(nil).FindByWalletID), walletID)
}

// GetWalletByUserID mocks base method.
func (m *MockRepository) GetWalletByUserID(ctx context.Context, userID string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", ctx, userID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockRepositoryMockRecorder) GetWalletByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockRepository)(nil).GetWalletByUserID), ctx, userID)
}

// GetWalletByWalletIDTx mocks base method.
func (m *MockRepository) GetWalletByWalletIDTx(ctx context.Context, tx *gorm.DB, walletID int64) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByWalletIDTx", ctx, tx, walletID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByWalletIDTx indicates an expected call of GetWalletByWalletIDTx.
func (mr *MockRepositoryMockRecorder) GetWalletByWalletIDTx(ctx, tx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByWalletIDTx", reflect.TypeOf((*MockRepository)(nil).GetWalletByWalletIDTx), ctx, tx, walletID)
}

// UpdateWallet mocks base method.
func (m *MockRepository) UpdateWallet(ctx context.Context, tx *gorm.DB, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, tx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockRepositoryMockRecorder) UpdateWallet(ctx, tx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockRepository)(nil).UpdateWallet), ctx, tx, wallet)
}
