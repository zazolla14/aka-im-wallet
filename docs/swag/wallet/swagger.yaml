basePath: /
definitions:
  apiresp.ApiResponse:
    properties:
      data: {}
      errCode:
        type: integer
      errDlt:
        type: string
      errMsg:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.BalanceAdjustmentByAdminRequest:
    properties:
      amount:
        type: number
      description:
        type: string
      operatedBy:
        type: string
      reason:
        type: string
      userID:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ClaimTransferRequest:
    properties:
      claimerUserID:
        type: string
      operateBy:
        type: string
      transferID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransactionReq:
    properties:
      amount:
        type: number
      createdBy:
        type: string
      descriptionEn:
        type: string
      descriptionZh:
        type: string
      entryType:
        type: string
      impactedItem:
        type: integer
      referenceCode:
        type: string
      transactionType:
        type: string
      walletID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferRequest:
    properties:
      amount:
        type: number
      createdBy:
        type: string
      fromUserID:
        type: string
      remark:
        type: string
      toUserID:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferResponse:
    properties:
      transferID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.DashboardTransactionVolumeResponse:
    properties:
      credit:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount'
      debit:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount'
    required:
    - credit
    - debit
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.Deposit:
    properties:
      amount:
        type: number
      approvedAt:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      depositID:
        type: integer
      description:
        type: string
      operatedBy:
        type: string
      statusRequest:
        type: string
      walletID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimRequest:
    properties:
      envelopeId:
        type: integer
      userId:
        type: string
      walletId:
        type: integer
    required:
    - envelopeId
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimResponse:
    properties:
      amount:
        type: number
      claimed_at:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      envelope:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Envelope'
      envelope_detail_id:
        type: integer
      envelope_detail_status:
        type: string
      envelope_id:
        type: integer
      is_active:
        type: boolean
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
      wallet:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Wallet'
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateRequest:
    properties:
      envelopeType:
        type: string
      remarks:
        type: string
      toUserId:
        type: string
      totalAmount:
        type: number
      totalClaimer:
        type: integer
      userId:
        type: string
      walletId:
        type: integer
    required:
    - envelopeType
    - remarks
    - totalAmount
    - totalClaimer
    - walletId
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deletedBy:
        type: string
      envelopeID:
        type: integer
      envelopeType:
        type: string
      expiredAt:
        type: string
      isActive:
        type: boolean
      maxNumReceived:
        type: integer
      refundedAt:
        type: string
      remarks:
        type: string
      totalAmount:
        type: number
      totalAmountClaimed:
        type: number
      totalAmountRefunded:
        type: number
      updatedAt:
        type: string
      updatedBy:
        type: string
      userID:
        type: string
      walletID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDTO:
    properties:
      created_at:
        type: string
      envelope_id:
        type: integer
      envelope_type:
        type: string
      expired_at:
        type: string
      is_expired:
        type: boolean
      is_refunded:
        type: boolean
      max_num_received:
        type: integer
      refunded_at:
        type: string
      remaining_amount:
        type: number
      remarks:
        type: string
      status:
        type: string
      total_amount:
        type: number
      total_amount_claimed:
        type: number
      total_amount_refunded:
        type: number
      user_id:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDetailDTO:
    properties:
      amount:
        type: number
      claimed_at:
        type: string
      created_at:
        type: string
      envelope_detail_id:
        type: integer
      envelope_detail_status:
        type: string
      envelope_id:
        type: integer
      is_claimed:
        type: boolean
      time_since_claimed:
        $ref: '#/definitions/time.Duration'
      user_id:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeStatistics:
    properties:
      claimed_count:
        type: integer
      expired_count:
        type: integer
      pending_count:
        type: integer
      refunded_count:
        type: integer
      total_claimed_amount:
        type: number
      total_details:
        type: integer
      unique_claimants_count:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetEnvelopeDetailResponse:
    properties:
      completion_percentage:
        type: number
      created_at:
        type: string
      details:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDetailDTO'
        type: array
      envelope_id:
        type: integer
      envelope_type:
        type: string
      expired_at:
        type: string
      is_expired:
        type: boolean
      is_refunded:
        type: boolean
      max_num_received:
        type: integer
      refunded_at:
        type: string
      remaining_amount:
        type: number
      remarks:
        type: string
      statistics:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeStatistics'
      status:
        type: string
      time_until_expiry:
        $ref: '#/definitions/time.Duration'
      total_amount:
        type: number
      total_amount_claimed:
        type: number
      total_amount_refunded:
        type: number
      user_id:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListDepositResponse:
    properties:
      deposits:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.Deposit'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListEnvelopeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDTO'
        type: array
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionMonitoringResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransactionDTO'
        type: array
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransaction'
        type: array
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTop10UsersResponse:
    properties:
      list_transaction:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.HighFrequencyUserDTO'
        type: array
      time:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTransferHistoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferDTO'
        type: array
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      statistics:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferStatistics'
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.HighFrequencyUserDTO:
    properties:
      credit:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount'
      debit:
        $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount'
      position:
        type: integer
      total_credit:
        type: number
      total_debit:
        type: number
      wallet_id:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ManualRefundArgs:
    properties:
      envelopeIDs:
        items:
          type: integer
        type: array
      transferIDs:
        items:
          type: integer
        type: array
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminRequest:
    properties:
      amount:
        type: number
      description:
        type: string
      operatedBy:
        type: string
      userID:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminResponse:
    properties:
      walletRechargeRequestID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.RefundTransferReq:
    properties:
      operatedBy:
        type: string
      transferID:
        type: integer
      userID:
        type: string
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount:
    properties:
      deposit:
        minimum: 0
        type: integer
      envelope_fixed:
        minimum: 0
        type: integer
      envelope_lucky:
        minimum: 0
        type: integer
      envelope_single:
        minimum: 0
        type: integer
      refund_envelope:
        minimum: 0
        type: integer
      refund_transfer:
        minimum: 0
        type: integer
      system_adjustment:
        minimum: 0
        type: integer
      transfer:
        minimum: 0
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferDTO:
    properties:
      amount:
        type: number
      claimed_at:
        type: string
      created_at:
        type: string
      expired_at:
        type: string
      from_user_id:
        type: string
      is_claimed:
        type: boolean
      is_expired:
        type: boolean
      is_pending:
        type: boolean
      is_refunded:
        type: boolean
      processing_time:
        $ref: '#/definitions/time.Duration'
      refunded_at:
        type: string
      remark:
        type: string
      status_transfer:
        type: string
      time_since_claimed:
        $ref: '#/definitions/time.Duration'
      time_until_expiry:
        $ref: '#/definitions/time.Duration'
      to_user_id:
        type: string
      transfer_id:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferStatistics:
    properties:
      average_amount:
        type: number
      claimed_amount:
        type: number
      claimed_count:
        type: integer
      expired_amount:
        type: number
      expired_count:
        type: integer
      pending_amount:
        type: number
      pending_count:
        type: integer
      refunded_amount:
        type: number
      refunded_count:
        type: integer
      total_amount:
        type: number
      total_transfers:
        type: integer
      unique_receivers_count:
        type: integer
      unique_senders_count:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransaction:
    properties:
      afterBalance:
        type: number
      amount:
        type: number
      beforeBalance:
        type: number
      descriptionEn:
        type: string
      descriptionZh:
        type: string
      entryType:
        type: string
      impactedItem:
        type: integer
      isShown:
        type: boolean
      referenceCode:
        type: string
      transactionDate:
        type: string
      transactionType:
        type: string
      walletID:
        type: integer
      walletTransactionID:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransactionDTO:
    properties:
      after_balance:
        type: number
      amount:
        type: number
      before_balance:
        type: number
      created_at:
        type: string
      description_en:
        type: string
      description_zh:
        type: string
      entry_type:
        type: string
      impacted_item:
        type: integer
      reference_code:
        type: string
      transaction_date:
        type: string
      transaction_type:
        type: string
      wallet_id:
        type: integer
      wallet_transaction_id:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Envelope:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      deleted_by:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      envelope_id:
        type: integer
      envelopeType:
        type: string
      expired_at:
        type: string
      is_active:
        type: boolean
      max_num_received:
        type: integer
      refunded_at:
        type: string
      remarks:
        type: string
      total_amount:
        type: number
      total_amount_claimed:
        type: number
      total_amount_refunded:
        type: number
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
      wallet_id:
        type: integer
    type: object
  bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Wallet:
    properties:
      balance:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      deleted_by:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      is_active:
        type: boolean
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
      wallet_id:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    format: int64
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
host: ap11.0dev.cc
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the Wallet API server
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Wallet API Documentation
  version: "1.0"
paths:
  /bo/balance_adjustment/list:
    get:
      consumes:
      - application/json
      description: Get list balance adjustment after processed by admin
      parameters:
      - default: 1
        description: page response
        in: query
        name: page
        type: integer
      - default: 10
        description: limit response
        in: query
        name: limit
        type: integer
      - description: filter date by
        in: query
        name: filterDateBy
        type: string
      - description: filter by userID
        in: query
        name: userID
        type: string
      - default: created_at
        description: sort list
        in: query
        name: sortBy
        type: string
      - default: desc
        description: sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - description: start date if filterdateby used
        format: date
        in: query
        name: startDate
        type: string
      - description: end date if filterdateby used
        format: date
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully get list balance adjustment
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Adjustment not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get List Balance Adjustment
      tags:
      - BalanceAdjustment
  /bo/balance_adjustment/process:
    post:
      consumes:
      - application/json
      description: added/deduct balance user by admin using balance adjustment
      parameters:
      - description: Balance adjustment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.BalanceAdjustmentByAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully adjust balance user
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Request invalid
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Wallet user not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Balance Adjustment processed by admin
      tags:
      - BalanceAdjustment
  /bo/refund/manual_process:
    post:
      consumes:
      - application/json
      description: manual refund processed by admin when auto refund is failed
      parameters:
      - description: Mnual refund request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ManualRefundArgs'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refund by admin
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Request invalid
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Wallet user not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Process manual refund processed by admin
      tags:
      - ManualRefund
  /deposit/list:
    get:
      consumes:
      - application/json
      description: Retrieve a filtered and paginated list of deposit transactions
        with various filtering and sorting options
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Start date for filtering (YYYY-MM-DD format)
        format: date
        in: query
        name: startDate
        type: string
      - description: End date for filtering (YYYY-MM-DD format)
        format: date
        in: query
        name: endDate
        type: string
      - description: Status of the deposit request
        enum:
        - requested
        - approved
        - rejected
        - failed
        in: query
        name: statusRequest
        type: string
      - default: created_at
        description: Column to sort by
        in: query
        name: sortBy
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - description: Date column to filter by
        enum:
        - created_at
        - approved_at
        - updated_at
        - deleted_at
        in: query
        name: filterDateBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved deposit list
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListDepositResponse'
        "400":
          description: Bad Request - Invalid date format or parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get deposit list
      tags:
      - Deposit
  /deposit/process:
    post:
      consumes:
      - application/json
      description: Create and process a deposit transaction on behalf of a user by
        admin
      parameters:
      - description: Deposit processing request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed deposit
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Process deposit by admin
      tags:
      - Deposit
  /envelope:
    post:
      consumes:
      - application/json
      description: Create a new envelope (red packet) that can be claimed by users
      parameters:
      - description: Envelope creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created envelope
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateResponse'
        "400":
          description: Bad Request - Invalid envelope data or insufficient balance
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create envelope
      tags:
      - Envelope
  /envelope/autoRefund:
    get:
      consumes:
      - application/json
      description: Process automatic refund for all expired envelopes
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed auto refund
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Auto refund envelopes
      tags:
      - Envelope
  /envelope/claim:
    post:
      consumes:
      - application/json
      description: Claim an available envelope (red packet) to receive money
      parameters:
      - description: Envelope claim request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully claimed envelope
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimResponse'
        "400":
          description: Bad Request - Invalid envelope ID or wallet ID, or envelope
            already claimed
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Envelope not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Claim envelope
      tags:
      - Envelope
  /envelope/refund/:envelopeID:
    get:
      consumes:
      - application/json
      description: Process refund for all expired envelopeByID
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed auto refund
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: refund envelopeByID
      tags:
      - Envelope
  /transfer/:transfer_id/detail:
    get:
      consumes:
      - application/json
      description: get detail transfer by transfer id and user id
      parameters:
      - description: ID of transfer
        in: path
        name: transfer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Get transfer detail
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Invalid transfer ID or should greater 0
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Transfer not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get detail transfer
      tags:
      - Transfer
  /transfer/claim:
    post:
      consumes:
      - application/json
      description: Claim a pending transfer that was sent to the authenticated user
      parameters:
      - description: Transfer claim request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ClaimTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully claimed transfer
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Invalid transfer ID or already claimed
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Transfer not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Claim transfer
      tags:
      - Transfer
  /transfer/create:
    post:
      consumes:
      - application/json
      description: Create a new transfer from authenticated user to another user
      parameters:
      - description: Transfer creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created transfer
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferResponse'
        "400":
          description: Bad Request - Invalid transfer data or insufficient balance
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Recipient user not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create transfer
      tags:
      - Transfer
  /transfer/refund:
    post:
      consumes:
      - application/json
      description: Refund a transfer authentication user after expired
      parameters:
      - description: Refund transfer request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.RefundTransferReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Refund transfer
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Invalid transfer ID or should greater 0
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Transfer not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Self Refund Transfer
      tags:
      - Transfer
  /wallet-monitoring/envelopes:
    get:
      consumes:
      - application/json
      description: Retrieve a filtered and paginated list of envelopes with various
        filtering options
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Minimum total amount
        in: query
        minimum: 0
        name: from_total_amount
        type: number
      - description: Maximum total amount
        in: query
        minimum: 0
        name: to_total_amount
        type: number
      - description: User ID to filter by
        in: query
        maxLength: 50
        minLength: 3
        name: user_id
        type: string
      - description: Maximum number received
        in: query
        maximum: 10000
        minimum: 0
        name: max_num_received
        type: integer
      - description: Type of envelope
        enum:
        - fixed
        - lucky
        - single
        in: query
        name: envelope_type
        type: string
      - description: Start timestamp for expiration filter
        in: query
        minimum: 0
        name: from_expired_at
        type: integer
      - description: End timestamp for expiration filter
        in: query
        minimum: 0
        name: to_expired_at
        type: integer
      - description: Start timestamp for refund filter
        in: query
        minimum: 0
        name: from_refunded_at
        type: integer
      - description: End timestamp for refund filter
        in: query
        minimum: 0
        name: to_refunded_at
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved envelope list
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListEnvelopeResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get envelope list
      tags:
      - Wallet Monitoring
  /wallet-monitoring/envelopes/{envelope_id}/details:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a specific envelope including
        its status and recipient details
      parameters:
      - description: Envelope ID
        in: path
        minimum: 1
        name: envelope_id
        required: true
        type: integer
      - description: Detail status filter
        enum:
        - pending
        - claimed
        - expired
        - refunded
        in: query
        name: detail_status
        type: string
      - description: Filter by claimed status
        in: query
        name: claimed
        type: boolean
      - description: User ID to filter by
        in: query
        maxLength: 50
        minLength: 3
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved envelope details
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetEnvelopeDetailResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Envelope not found
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get envelope details
      tags:
      - Wallet Monitoring
  /wallet-monitoring/top-users:
    get:
      consumes:
      - application/json
      description: Retrieve the top 10 users ranked by total amount within a specified
        time scope
      parameters:
      - default: true
        description: Sort by total amount
        in: query
        name: sort_by_total_amount
        type: boolean
      - description: Time scope for ranking
        enum:
        - all_time
        - year
        - month
        in: query
        name: scope
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved top 10 users
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTop10UsersResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get top 10 users
      tags:
      - Wallet Monitoring
  /wallet-monitoring/transaction-volume:
    get:
      consumes:
      - application/json
      description: Retrieve transaction volume statistics for dashboard display
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transaction volume data
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.DashboardTransactionVolumeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get dashboard transaction volume
      tags:
      - Wallet Monitoring
  /wallet-monitoring/transactions:
    get:
      consumes:
      - application/json
      description: Retrieve a filtered and paginated list of transactions for monitoring
        purposes
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Start date for transaction filter (RFC3339 format)
        format: date-time
        in: query
        name: from_transaction_date
        type: string
      - description: End date for transaction filter (RFC3339 format)
        format: date-time
        in: query
        name: to_transaction_date
        type: string
      - description: Type of transaction
        enum:
        - transfer
        - deposit
        - withdrawal
        in: query
        name: transaction_type
        type: string
      - description: Entry type
        enum:
        - credit
        - debit
        in: query
        name: entry_type
        type: string
      - description: Minimum transaction amount
        in: query
        minimum: 0
        name: from_amount
        type: number
      - description: Maximum transaction amount
        in: query
        minimum: 0
        name: to_amount
        type: number
      - description: Wallet ID to filter by
        in: query
        minimum: 0
        name: wallet_id
        type: integer
      - description: Reference code to filter by
        in: query
        name: reference_code
        type: string
      - description: Wallet transaction ID to filter by
        in: query
        name: wallet_transaction_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transaction list
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionMonitoringResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transaction monitoring list
      tags:
      - Wallet Monitoring
  /wallet-monitoring/transfers:
    get:
      consumes:
      - application/json
      description: Retrieve a filtered and paginated list of transfer transactions
        with comprehensive filtering options
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Source user ID filter
        in: query
        maxLength: 50
        minLength: 3
        name: from_user_id
        type: string
      - description: Destination user ID filter
        in: query
        maxLength: 50
        minLength: 3
        name: to_user_id
        type: string
      - description: Transfer status filter
        enum:
        - pending
        - claimed
        - expired
        - refunded
        - canceled
        in: query
        name: status_transfer
        type: string
      - description: Minimum transfer amount
        in: query
        minimum: 0
        name: from_amount
        type: number
      - description: Maximum transfer amount
        in: query
        minimum: 0
        name: to_amount
        type: number
      - description: Start timestamp for expiration filter
        in: query
        minimum: 0
        name: from_expired_at
        type: integer
      - description: End timestamp for expiration filter
        in: query
        minimum: 0
        name: to_expired_at
        type: integer
      - description: Start timestamp for claimed filter
        in: query
        minimum: 0
        name: from_claimed_at
        type: integer
      - description: End timestamp for claimed filter
        in: query
        minimum: 0
        name: to_claimed_at
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transfer history
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTransferHistoryResponse'
        "400":
          description: Bad Request - Invalid parameters
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transfer history
      tags:
      - Wallet Monitoring
  /wallet/create:
    post:
      consumes:
      - application/json
      description: Create a new wallet for the authenticated user if they don't have
        one
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created wallet
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Wallet already exists
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new wallet
      tags:
      - Wallet
  /wallet/detail:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about the authenticated user's wallet
        including balance and status
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved wallet details
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "404":
          description: Not Found - Wallet not found for user
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallet details
      tags:
      - Wallet
  /wallet_transactions/cash_flow:
    get:
      consumes:
      - application/json
      description: Retrieve a filtered and paginated list of wallet transactions within
        a date range
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Start date for filtering (YYYY-MM-DD format)
        format: date
        in: query
        name: startDate
        type: string
      - description: End date for filtering (YYYY-MM-DD format)
        format: date
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transaction list
          schema:
            $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionResponse'
        "400":
          description: Bad Request - Invalid date format
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transaction cash flow
      tags:
      - Wallet Transactions
  /wallet_transactions/create:
    post:
      consumes:
      - application/json
      description: Create a new transaction for the specified wallet with transaction
        details
      parameters:
      - description: Transaction creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransactionReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created transaction
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "400":
          description: Bad Request - Invalid transaction data
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "401":
          description: Unauthorized - User ID not found in context
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apiresp.ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create wallet transaction
      tags:
      - Wallet Transactions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
