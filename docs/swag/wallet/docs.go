// Package wallet Code generated by swaggo/swag. DO NOT EDIT
package wallet

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bo/balance_adjustment/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list balance adjustment after processed by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceAdjustment"
                ],
                "summary": "Get List Balance Adjustment",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "page response",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit response",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter date by",
                        "name": "filterDateBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by userID",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "sort list",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "sort order",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "start date if filterdateby used",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "end date if filterdateby used",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get list balance adjustment",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Adjustment not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/bo/balance_adjustment/process": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "added/deduct balance user by admin using balance adjustment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceAdjustment"
                ],
                "summary": "Balance Adjustment processed by admin",
                "parameters": [
                    {
                        "description": "Balance adjustment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.BalanceAdjustmentByAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully adjust balance user",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Request invalid",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Wallet user not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/bo/refund/manual_process": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "manual refund processed by admin when auto refund is failed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ManualRefund"
                ],
                "summary": "Process manual refund processed by admin",
                "parameters": [
                    {
                        "description": "Mnual refund request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ManualRefundArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refund by admin",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Request invalid",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Wallet user not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/deposit/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a filtered and paginated list of deposit transactions with various filtering and sorting options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deposit"
                ],
                "summary": "Get deposit list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "Start date for filtering (YYYY-MM-DD format)",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "End date for filtering (YYYY-MM-DD format)",
                        "name": "endDate",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "requested",
                            "approved",
                            "rejected",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Status of the deposit request",
                        "name": "statusRequest",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Column to sort by",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "approved_at",
                            "updated_at",
                            "deleted_at"
                        ],
                        "type": "string",
                        "description": "Date column to filter by",
                        "name": "filterDateBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved deposit list",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListDepositResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid date format or parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/deposit/process": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create and process a deposit transaction on behalf of a user by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deposit"
                ],
                "summary": "Process deposit by admin",
                "parameters": [
                    {
                        "description": "Deposit processing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully processed deposit",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/envelope": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new envelope (red packet) that can be claimed by users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Envelope"
                ],
                "summary": "Create envelope",
                "parameters": [
                    {
                        "description": "Envelope creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created envelope",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid envelope data or insufficient balance",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/envelope/autoRefund": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process automatic refund for all expired envelopes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Envelope"
                ],
                "summary": "Auto refund envelopes",
                "responses": {
                    "200": {
                        "description": "Successfully processed auto refund",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/envelope/claim": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Claim an available envelope (red packet) to receive money",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Envelope"
                ],
                "summary": "Claim envelope",
                "parameters": [
                    {
                        "description": "Envelope claim request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully claimed envelope",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid envelope ID or wallet ID, or envelope already claimed",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Envelope not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/envelope/refund/:envelopeID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process refund for all expired envelopeByID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Envelope"
                ],
                "summary": "refund envelopeByID",
                "responses": {
                    "200": {
                        "description": "Successfully processed auto refund",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transfer/:transfer_id/detail": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get detail transfer by transfer id and user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer"
                ],
                "summary": "Get detail transfer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of transfer",
                        "name": "transfer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Get transfer detail",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid transfer ID or should greater 0",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Transfer not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transfer/claim": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Claim a pending transfer that was sent to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer"
                ],
                "summary": "Claim transfer",
                "parameters": [
                    {
                        "description": "Transfer claim request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ClaimTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully claimed transfer",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid transfer ID or already claimed",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Transfer not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transfer/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new transfer from authenticated user to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer"
                ],
                "summary": "Create transfer",
                "parameters": [
                    {
                        "description": "Transfer creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created transfer",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid transfer data or insufficient balance",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Recipient user not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transfer/refund": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Refund a transfer authentication user after expired",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer"
                ],
                "summary": "Self Refund Transfer",
                "parameters": [
                    {
                        "description": "Refund transfer request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.RefundTransferReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Refund transfer",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid transfer ID or should greater 0",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Transfer not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/envelopes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a filtered and paginated list of envelopes with various filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get envelope list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Minimum total amount",
                        "name": "from_total_amount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Maximum total amount",
                        "name": "to_total_amount",
                        "in": "query"
                    },
                    {
                        "maxLength": 50,
                        "minLength": 3,
                        "type": "string",
                        "description": "User ID to filter by",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "maximum": 10000,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Maximum number received",
                        "name": "max_num_received",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "fixed",
                            "lucky",
                            "single"
                        ],
                        "type": "string",
                        "description": "Type of envelope",
                        "name": "envelope_type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Start timestamp for expiration filter",
                        "name": "from_expired_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "End timestamp for expiration filter",
                        "name": "to_expired_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Start timestamp for refund filter",
                        "name": "from_refunded_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "End timestamp for refund filter",
                        "name": "to_refunded_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved envelope list",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListEnvelopeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/envelopes/{envelope_id}/details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve detailed information about a specific envelope including its status and recipient details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get envelope details",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Envelope ID",
                        "name": "envelope_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pending",
                            "claimed",
                            "expired",
                            "refunded"
                        ],
                        "type": "string",
                        "description": "Detail status filter",
                        "name": "detail_status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by claimed status",
                        "name": "claimed",
                        "in": "query"
                    },
                    {
                        "maxLength": 50,
                        "minLength": 3,
                        "type": "string",
                        "description": "User ID to filter by",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved envelope details",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetEnvelopeDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Envelope not found",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/top-users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the top 10 users ranked by total amount within a specified time scope",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get top 10 users",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Sort by total amount",
                        "name": "sort_by_total_amount",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all_time",
                            "year",
                            "month"
                        ],
                        "type": "string",
                        "description": "Time scope for ranking",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved top 10 users",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTop10UsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/transaction-volume": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve transaction volume statistics for dashboard display",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get dashboard transaction volume",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transaction volume data",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.DashboardTransactionVolumeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a filtered and paginated list of transactions for monitoring purposes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get transaction monitoring list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start date for transaction filter (RFC3339 format)",
                        "name": "from_transaction_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End date for transaction filter (RFC3339 format)",
                        "name": "to_transaction_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "transfer",
                            "deposit",
                            "withdrawal"
                        ],
                        "type": "string",
                        "description": "Type of transaction",
                        "name": "transaction_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "credit",
                            "debit"
                        ],
                        "type": "string",
                        "description": "Entry type",
                        "name": "entry_type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Minimum transaction amount",
                        "name": "from_amount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Maximum transaction amount",
                        "name": "to_amount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Wallet ID to filter by",
                        "name": "wallet_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reference code to filter by",
                        "name": "reference_code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Wallet transaction ID to filter by",
                        "name": "wallet_transaction_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transaction list",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionMonitoringResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet-monitoring/transfers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a filtered and paginated list of transfer transactions with comprehensive filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Monitoring"
                ],
                "summary": "Get transfer history",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "maxLength": 50,
                        "minLength": 3,
                        "type": "string",
                        "description": "Source user ID filter",
                        "name": "from_user_id",
                        "in": "query"
                    },
                    {
                        "maxLength": 50,
                        "minLength": 3,
                        "type": "string",
                        "description": "Destination user ID filter",
                        "name": "to_user_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "claimed",
                            "expired",
                            "refunded",
                            "canceled"
                        ],
                        "type": "string",
                        "description": "Transfer status filter",
                        "name": "status_transfer",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Minimum transfer amount",
                        "name": "from_amount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "description": "Maximum transfer amount",
                        "name": "to_amount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Start timestamp for expiration filter",
                        "name": "from_expired_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "End timestamp for expiration filter",
                        "name": "to_expired_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Start timestamp for claimed filter",
                        "name": "from_claimed_at",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "End timestamp for claimed filter",
                        "name": "to_claimed_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transfer history",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTransferHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new wallet for the authenticated user if they don't have one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Create new wallet",
                "responses": {
                    "200": {
                        "description": "Successfully created wallet",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Wallet already exists",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet/detail": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve detailed information about the authenticated user's wallet including balance and status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet details",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved wallet details",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Wallet not found for user",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet_transactions/cash_flow": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a filtered and paginated list of wallet transactions within a date range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Transactions"
                ],
                "summary": "Get transaction cash flow",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "Start date for filtering (YYYY-MM-DD format)",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "End date for filtering (YYYY-MM-DD format)",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transaction list",
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid date format",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        },
        "/wallet_transactions/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new transaction for the specified wallet with transaction details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Transactions"
                ],
                "summary": "Create wallet transaction",
                "parameters": [
                    {
                        "description": "Transaction creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransactionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created transaction",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid transaction data",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiresp.ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiresp.ApiResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "errCode": {
                    "type": "integer"
                },
                "errDlt": {
                    "type": "string"
                },
                "errMsg": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.BalanceAdjustmentByAdminRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "operatedBy": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ClaimTransferRequest": {
            "type": "object",
            "properties": {
                "claimerUserID": {
                    "type": "string"
                },
                "operateBy": {
                    "type": "string"
                },
                "transferID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransactionReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdBy": {
                    "type": "string"
                },
                "descriptionEn": {
                    "type": "string"
                },
                "descriptionZh": {
                    "type": "string"
                },
                "entryType": {
                    "type": "string"
                },
                "impactedItem": {
                    "type": "integer"
                },
                "referenceCode": {
                    "type": "string"
                },
                "transactionType": {
                    "type": "string"
                },
                "walletID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdBy": {
                    "type": "string"
                },
                "fromUserID": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "toUserID": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.CreateTransferResponse": {
            "type": "object",
            "properties": {
                "transferID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.DashboardTransactionVolumeResponse": {
            "type": "object",
            "required": [
                "credit",
                "debit"
            ],
            "properties": {
                "credit": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount"
                },
                "debit": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.Deposit": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "approvedAt": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "depositID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "operatedBy": {
                    "type": "string"
                },
                "statusRequest": {
                    "type": "string"
                },
                "walletID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimRequest": {
            "type": "object",
            "required": [
                "envelopeId"
            ],
            "properties": {
                "envelopeId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                },
                "walletId": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeClaimResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "claimed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "deleted_by": {
                    "type": "string"
                },
                "envelope": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Envelope"
                },
                "envelope_detail_id": {
                    "type": "integer"
                },
                "envelope_detail_status": {
                    "type": "string"
                },
                "envelope_id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Wallet"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateRequest": {
            "type": "object",
            "required": [
                "envelopeType",
                "remarks",
                "totalAmount",
                "totalClaimer",
                "walletId"
            ],
            "properties": {
                "envelopeType": {
                    "type": "string"
                },
                "remarks": {
                    "type": "string"
                },
                "toUserId": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "number"
                },
                "totalClaimer": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                },
                "walletId": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeCreateResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "deletedBy": {
                    "type": "string"
                },
                "envelopeID": {
                    "type": "integer"
                },
                "envelopeType": {
                    "type": "string"
                },
                "expiredAt": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "maxNumReceived": {
                    "type": "integer"
                },
                "refundedAt": {
                    "type": "string"
                },
                "remarks": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "number"
                },
                "totalAmountClaimed": {
                    "type": "number"
                },
                "totalAmountRefunded": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updatedBy": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                },
                "walletID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "envelope_id": {
                    "type": "integer"
                },
                "envelope_type": {
                    "type": "string"
                },
                "expired_at": {
                    "type": "string"
                },
                "is_expired": {
                    "type": "boolean"
                },
                "is_refunded": {
                    "type": "boolean"
                },
                "max_num_received": {
                    "type": "integer"
                },
                "refunded_at": {
                    "type": "string"
                },
                "remaining_amount": {
                    "type": "number"
                },
                "remarks": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "total_amount_claimed": {
                    "type": "number"
                },
                "total_amount_refunded": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDetailDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "claimed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "envelope_detail_id": {
                    "type": "integer"
                },
                "envelope_detail_status": {
                    "type": "string"
                },
                "envelope_id": {
                    "type": "integer"
                },
                "is_claimed": {
                    "type": "boolean"
                },
                "time_since_claimed": {
                    "$ref": "#/definitions/time.Duration"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeStatistics": {
            "type": "object",
            "properties": {
                "claimed_count": {
                    "type": "integer"
                },
                "expired_count": {
                    "type": "integer"
                },
                "pending_count": {
                    "type": "integer"
                },
                "refunded_count": {
                    "type": "integer"
                },
                "total_claimed_amount": {
                    "type": "number"
                },
                "total_details": {
                    "type": "integer"
                },
                "unique_claimants_count": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetEnvelopeDetailResponse": {
            "type": "object",
            "properties": {
                "completion_percentage": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDetailDTO"
                    }
                },
                "envelope_id": {
                    "type": "integer"
                },
                "envelope_type": {
                    "type": "string"
                },
                "expired_at": {
                    "type": "string"
                },
                "is_expired": {
                    "type": "boolean"
                },
                "is_refunded": {
                    "type": "boolean"
                },
                "max_num_received": {
                    "type": "integer"
                },
                "refunded_at": {
                    "type": "string"
                },
                "remaining_amount": {
                    "type": "number"
                },
                "remarks": {
                    "type": "string"
                },
                "statistics": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeStatistics"
                },
                "status": {
                    "type": "string"
                },
                "time_until_expiry": {
                    "$ref": "#/definitions/time.Duration"
                },
                "total_amount": {
                    "type": "number"
                },
                "total_amount_claimed": {
                    "type": "number"
                },
                "total_amount_refunded": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListDepositResponse": {
            "type": "object",
            "properties": {
                "deposits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.Deposit"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListEnvelopeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.EnvelopeDTO"
                    }
                },
                "has_next": {
                    "type": "boolean"
                },
                "has_prev": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionMonitoringResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransactionDTO"
                    }
                },
                "has_next": {
                    "type": "boolean"
                },
                "has_prev": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetListTransactionResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransaction"
                    }
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTop10UsersResponse": {
            "type": "object",
            "properties": {
                "list_transaction": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.HighFrequencyUserDTO"
                    }
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.GetTransferHistoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferDTO"
                    }
                },
                "has_next": {
                    "type": "boolean"
                },
                "has_prev": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "statistics": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferStatistics"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.HighFrequencyUserDTO": {
            "type": "object",
            "properties": {
                "credit": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount"
                },
                "debit": {
                    "$ref": "#/definitions/bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount"
                },
                "position": {
                    "type": "integer"
                },
                "total_credit": {
                    "type": "number"
                },
                "total_debit": {
                    "type": "number"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ManualRefundArgs": {
            "type": "object",
            "properties": {
                "envelopeIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "transferIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "operatedBy": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.ProcessDepositByAdminResponse": {
            "type": "object",
            "properties": {
                "walletRechargeRequestID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.RefundTransferReq": {
            "type": "object",
            "properties": {
                "operatedBy": {
                    "type": "string"
                },
                "transferID": {
                    "type": "integer"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransactionTypeCount": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer",
                    "minimum": 0
                },
                "envelope_fixed": {
                    "type": "integer",
                    "minimum": 0
                },
                "envelope_lucky": {
                    "type": "integer",
                    "minimum": 0
                },
                "envelope_single": {
                    "type": "integer",
                    "minimum": 0
                },
                "refund_envelope": {
                    "type": "integer",
                    "minimum": 0
                },
                "refund_transfer": {
                    "type": "integer",
                    "minimum": 0
                },
                "system_adjustment": {
                    "type": "integer",
                    "minimum": 0
                },
                "transfer": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "claimed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expired_at": {
                    "type": "string"
                },
                "from_user_id": {
                    "type": "string"
                },
                "is_claimed": {
                    "type": "boolean"
                },
                "is_expired": {
                    "type": "boolean"
                },
                "is_pending": {
                    "type": "boolean"
                },
                "is_refunded": {
                    "type": "boolean"
                },
                "processing_time": {
                    "$ref": "#/definitions/time.Duration"
                },
                "refunded_at": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "status_transfer": {
                    "type": "string"
                },
                "time_since_claimed": {
                    "$ref": "#/definitions/time.Duration"
                },
                "time_until_expiry": {
                    "$ref": "#/definitions/time.Duration"
                },
                "to_user_id": {
                    "type": "string"
                },
                "transfer_id": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.TransferStatistics": {
            "type": "object",
            "properties": {
                "average_amount": {
                    "type": "number"
                },
                "claimed_amount": {
                    "type": "number"
                },
                "claimed_count": {
                    "type": "integer"
                },
                "expired_amount": {
                    "type": "number"
                },
                "expired_count": {
                    "type": "integer"
                },
                "pending_amount": {
                    "type": "number"
                },
                "pending_count": {
                    "type": "integer"
                },
                "refunded_amount": {
                    "type": "number"
                },
                "refunded_count": {
                    "type": "integer"
                },
                "total_amount": {
                    "type": "number"
                },
                "total_transfers": {
                    "type": "integer"
                },
                "unique_receivers_count": {
                    "type": "integer"
                },
                "unique_senders_count": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransaction": {
            "type": "object",
            "properties": {
                "afterBalance": {
                    "type": "number"
                },
                "amount": {
                    "type": "number"
                },
                "beforeBalance": {
                    "type": "number"
                },
                "descriptionEn": {
                    "type": "string"
                },
                "descriptionZh": {
                    "type": "string"
                },
                "entryType": {
                    "type": "string"
                },
                "impactedItem": {
                    "type": "integer"
                },
                "isShown": {
                    "type": "boolean"
                },
                "referenceCode": {
                    "type": "string"
                },
                "transactionDate": {
                    "type": "string"
                },
                "transactionType": {
                    "type": "string"
                },
                "walletID": {
                    "type": "integer"
                },
                "walletTransactionID": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_domain.WalletTransactionDTO": {
            "type": "object",
            "properties": {
                "after_balance": {
                    "type": "number"
                },
                "amount": {
                    "type": "number"
                },
                "before_balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "description_en": {
                    "type": "string"
                },
                "description_zh": {
                    "type": "string"
                },
                "entry_type": {
                    "type": "string"
                },
                "impacted_item": {
                    "type": "integer"
                },
                "reference_code": {
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                },
                "transaction_type": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "integer"
                },
                "wallet_transaction_id": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Envelope": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "deleted_by": {
                    "type": "string"
                },
                "envelopeType": {
                    "type": "string"
                },
                "envelope_id": {
                    "type": "integer"
                },
                "expired_at": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_num_received": {
                    "type": "integer"
                },
                "refunded_at": {
                    "type": "string"
                },
                "remarks": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "total_amount_claimed": {
                    "type": "number"
                },
                "total_amount_refunded": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "bitbucket_org_interdigital_aka-im-server-wallet_internal_model.Wallet": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "deleted_by": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "format": "int64",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "ap11.0dev.cc",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Wallet API Documentation",
	Description:      "This is the Wallet API server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
